# -*- coding: utf-8 -*-
"""GA_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nMktfA0U-wETPpSYAYe5UA6bxnK-ZvE
"""

pip install gymnasium

import numpy as np
import gymnasium as gym
import matplotlib.pyplot as plt
import time

from io import BytesIO
from PIL import Image

"""Big parameters"""

pop_size = 100
half_pop_size = int(pop_size/2)
max_moves = 500

"""Initial population creation"""

population = np.random.choice([0,1], (pop_size, max_moves))

"""###GA functions

The fitness will be extracted directly from the environment as the number of moves performed before the end of the episode
"""

def fitness_selection(fitnesses):
  half_pop_size = int(len(fitnesses)/2)
  pairs = np.random.choice(range(len(fitnesses)), size=(half_pop_size, 2), p=fitnesses/sum(fitnesses))
  return pairs

def rank_selection(fitnesses):
  half_pop_size = int(len(fitnesses)/2)
  pairs = np.random.choice(range(len(fitnesses)), size=(half_pop_size, 2), p=np.argsort(fitnesses)/sum(range(len(fitnesses))))
  return pairs

def crossover(pairs, population):
  pop_size = population.shape[0]

  new_gen = np.empty((pop_size, max_moves))
  for pair_nb in range(pairs.shape[0]):
    pair = pairs[pair_nb]
    dad = population[pair[0],:]
    mom = population[pair[1],:]

    for i in range(max_moves):
      if np.random.choice([True,False]):
        new_gen[2*pair_nb, i] = dad[i]
        new_gen[2*pair_nb+1, i] = mom[i]
      else:
        new_gen[2*pair_nb, i] = mom[i]
        new_gen[2*pair_nb+1, i] = dad[i]

  return new_gen

def mutation(population, mutation_rate):
  pop_size = population.shape[0]

  for i in range(pop_size):
    for j in range(max_moves):

      if np.random.random() <= mutation_rate:
        population[i,j] = 1-population[i,j]
  return population

def pop_diversity(population):
  return np.std(population, 0).mean()

"""###Environment functions"""

def play_gen(population, env):
  pop_size = population.shape[0]
  fitnesses = np.empty(pop_size)

  for i in range(pop_size):
    env.reset()

    for t in range(max_moves):
      action = population[i,t]
      observation, reward, done, info, blc = env.step(action)

      if done : break

    fitnesses[i]=t

  return fitnesses

"""###Environment creation"""

env = gym.make("CartPole-v1")
population = np.random.choice([0,1], (pop_size, max_moves))

class GA_agent():

  def __init__(self, selection, nb_gen, pop_size, mutation_rate, elitism=0):
    if selection == "rank" : self.select = rank_selection
    elif selection=="fitness" : self.select = fitness_selection
    else : return "Unknown selection method"

    self.nb_gen = nb_gen
    self.pop_size = pop_size
    self.population = np.random.choice([0,1], (pop_size, max_moves))
    self.mutation_rate = mutation_rate
    self.elitism = elitism

    self.best_score = 0

    self.best_scores = np.empty(nb_gen)
    self.avg_scores = np.empty(nb_gen)
    self.diversity = np.empty(nb_gen)
    self.time_samples = np.empty(nb_gen)

  def evolve(self, env = gym.make("CartPole-v1")):

    last_time = time.time()
    start_time  = last_time

    for i in range(self.nb_gen):

      self.population = self.population.astype(int)

      self.diversity[i] = pop_diversity(self.population)

      fit = play_gen(self.population, env)

      if max(fit) > self.best_score: self.best_score = max(fit)

      now = time.time()
      self.time_samples[i] = now - start_time

      self.elite = self.population[np.argmax(fit)].copy()

      self.best_scores[i] = max(fit)
      self.avg_scores[i] = np.mean(fit)

      # Selection
      pairs = self.select(fit)
      # Crossover
      self.population = crossover(pairs, self.population)
      # Mutation
      self.population = mutation(self.population, self.mutation_rate)
      # Elitism
      self.population[np.random.choice(range(self.pop_size))] = self.elite

    env.close()


  def plot_evolution(self):
    plt.plot(self.best_scores, label="Best score")
    plt.plot(self.avg_scores, label="Average score")
    plt.legend()
    plt.xlabel("Generation")
    plt.ylabel("Fitness")
    plt.title("Fitness over time")
    plt.show()

  def plot_evolution_per_second(self):
    plt.plot(self.time_samples, self.best_scores, label="Max scores")
    plt.plot(self.time_samples, self.avg_scores, label="Mean score")
    plt.legend()
    plt.xlabel("Seconds of training")
    plt.ylabel("Fitness")
    plt.title("Fitness over training time")
    plt.show()

  def plot_diversity(self):
    plt.plot(self.diversity, color="orange")
    plt.xlabel("Generation")
    plt.ylabel("Average gene STD")
    plt.title("Population diversity over time")
    plt.show()


  def display_game(self, game = "CartPole-v1"):
    env = gym.make(game, render_mode="human")

    env.reset()
    frames = []
    for t in range(max_moves):
      action = self.elite[t]
      observation, reward, done, info, blc = env.step(action)
      frame = env.render()

      im = Image.fromarray(frame)

      frames.append(im)

      if done : break

    env.close()
    print(len(frames))

    animated_gif = BytesIO()
    frames[0].save(animated_gif,
                  format='GIF',
                  save_all=True,
                  append_images=frames[1:],      # Pillow >= 3.4.0
                  delay=0.1,
                  loop=0)
    animated_gif.seek(0,2)

    animated_gif.seek(0)
    ani = Image.open(animated_gif)
    ani.show()

    return frames

nb_gen = 10
pop_size = 100
mutation_rate = 0.005

agent = GA_agent("fitness", nb_gen, pop_size, mutation_rate)

agent.evolve()

agent.display_game()

agent.plot_evolution_per_second()
agent.plot_evolution()
agent.plot_diversity()

best = evolve("fitness", nb_gen, pop_size, mutation_rate)

play_gen(np.array([best]), env)